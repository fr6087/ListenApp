using System;
using System.Collections.Generic;
using Microsoft.Bot.Connector;
using Microsoft.Bot.Builder.FormFlow;
using System.Collections.Concurrent;
using System.Globalization;
using System.Threading;
using Newtonsoft.Json.Linq;
using System.Reflection;
using System.IO;
using Microsoft.Bot.Builder.Dialogs;
using Microsoft.Bot.Builder.FormFlow.Json;
using System.Configuration;
using System.Threading.Tasks;
using Microsoft.Bot.Builder.Luis;
using Microsoft.Bot.Builder.Luis.Models;
using System.Collections;

namespace LuisBot.Dialogs
{


    /// <summary>
    /// This is the first dialog that MessagesController sends its messages to.
    /// The BasicLuisDialog class is implementing processing of the Luis.ai language model that belongs to this application. Each intent discovered by the Luis-Model triggers
    /// a certain action. The strings used in this class were generated by Microsoft's rview.exe tool. assambly name is assembly LuisBot.dll and 
    /// namespace for rview tool Method to build Form: ESF2CompanyDetailsForm.BuildForm();
    ///  reference: https://stackoverflow.com/questions/46199439/how-to-use-rview-tool-in-bot-builder-c-sdk-to-localize-strings-in-form-flow
    ///  reference: 
    /// </summary>
    [Serializable]
        public class BasicLuisDialog : LuisDialog<object>
        {

            /// <summary>
            /// the constructor uses information from the web.config that it needs to authenticate towards the online luis language model
            /// </summary>
            public BasicLuisDialog() : base(new LuisService(new LuisModelAttribute(ConfigurationManager.AppSettings["LuisAppId"], ConfigurationManager.AppSettings["LuisAPIKey"])))
            {

            }

            /// <summary>
            /// The none intent is the default intent that is recognized
            /// </summary>
            /// <param name="context">The calling class, MessagesConroller</param>
            /// <param name="result">The parameters returned by the language model. Contains sometimes entities</param>
            /// <returns></returns>
            [LuisIntent("")]
            [LuisIntent("None")]
            public async Task NoneIntent(IDialogContext context, LuisResult result)
            {
                await context.PostAsync($"{result.Query}"); //Resource1.NoneMessage
                context.Wait(MessageReceived);
            }
            
            /// <summary>
            /// The greeting intent should be reached whenever the user is typing in a greeting. Note: There are nice examples of using this for
            /// determining the language that the user prefers.
            /// </summary>
            /// <param name="context">MessagesController</param>
            /// <param name="result">the luisresult returned from the language Model</param>
            /// <returns></returns>
            [LuisIntent("Greeting")]
            public async Task GreetingIntent(IDialogContext context, LuisResult result)
            {
                await context.PostAsync($"{result.Query}. ");//+ Resource1.GreetingMessage);
                context.Wait(MessageReceived);
            }
            
            /// <summary>
            /// The fillin-intent should be recognized by the language model whenever the user says something that implies he or she wants to
            /// fill in a field in the form. As it is, for each field intent there needs to be an endbpoint call. As that is very inefficient,
            /// If's better to let the bot work with Formflow/ESF2.Unternehmensangaben
            /// /// </summary>
            /// <param name="context"></param>
            /// <param name="result"></param>
            /// <returns></returns>
            [LuisIntent("Field.FillIn")]
            public async Task FillInIntent(IDialogContext context, LuisResult result)
            {
                await context.PostAsync($"Fillin-Intent. {result.Query}"); //Resource1.FillInMessage
                var feedbackForm = new FormDialog<ESF2CompanyDetailsForm>(new ESF2CompanyDetailsForm(), ESF2CompanyDetailsForm.BuildForm, FormOptions.PromptInStart, result.Entities);
                context.Call(feedbackForm, FeedbackFormComplete);
                //context.Wait(MessageReceived);
            }

            /// <summary>
            /// ESF2.Unternehmensangaben is triggered when the user says something like "Unernehmensangaben ausfüllen"
            /// </summary>
            /// <param name="context"></param>
            /// <param name="result"></param>
            /// <returns></returns>
            [LuisIntent("ESF2.Unternehmensangaben")]
            public async Task CompanyDetailsIntent(IDialogContext context, LuisResult result)
            {
                //await context.PostAsync($"");Resource1.CompanyDetailsMessage
                IMessageActivity message = Activity.CreateMessageActivity();
                message.Text = result.TopScoringIntent.Intent;
                message.TextFormat = "plain";
                message.Locale = System.Globalization.CultureInfo.CurrentCulture.Name;
                var feedbackForm = new FormDialog<ESF2CompanyDetailsForm>(new ESF2CompanyDetailsForm(), ESF2CompanyDetailsForm.BuildLocalizedForm, FormOptions.PromptInStart, result.Entities);
                context.Call(feedbackForm, FeedbackFormComplete);
            }

            /// <summary>
            /// This is a steering intent, that has not been implemented so far.
            /// </summary>
            /// <param name="context"></param>
            /// <param name="result"></param>
            /// <returns></returns>
            [LuisIntent("Utilities.GoBack")]
            public async Task GoBackIntent(IDialogContext context, LuisResult result)
            {
                await context.PostAsync($" {result.Query}"); //Resource1.GoBackMessage
                context.Wait(MessageReceived);
            }

            /// <summary>
            /// spawns a seperate dialog to help the user.
            /// </summary>
            /// <param name="context"></param>
            /// <param name="result"></param>
            /// <returns></returns>
            [LuisIntent("Utilities.Help")]
            public async Task HelpIntent(IDialogContext context, LuisResult result)
            {
                var reply = context.MakeMessage();
                reply.Text = "?";//Resource1.HelpText
                reply.Speak = "?";//Resource1.HelpSpeak
                // reply.InputHint = InputHints.AcceptingInput;
                await context.PostAsync(reply);
                context.Call(new HelpDialog(), AfterDialog);
            }
            
            /// <summary>
            /// not implemented yet. In the web form there are some fields in which the user has to choose an attachment. This intent could
            /// come convienient for that.
            /// </summary>
            /// <param name="context"></param>
            /// <param name="result"></param>
            /// <returns></returns>
            [LuisIntent("Upload")]
            public async Task UploadIntent(IDialogContext context, LuisResult result)
            {
                /* var reply = context.MakeMessage();
                 reply.Text = Resource1.UploadOptions;
                 reply.Speak = reply.Text;

                 await context.PostAsync(reply);*/

                context.Call(new UploadDialog(), AfterDialog);
            }

            /// <summary>
            /// resume handler for fillIn and FormIntent (='unternehmensangaben')
            /// </summary>
            /// <param name="context"></param>
            /// <param name="result"></param>
            /// <returns></returns>
            private async Task FeedbackFormComplete(IDialogContext context, IAwaitable<ESF2CompanyDetailsForm> result)
            {
                var confirm = await result;

                await context.PostAsync(Resource1.Save);

                context.Wait(MessageReceivedAsync);

            }
            /// <summary>
            /// is a resume handler that handles navigation to the final resumeHandler or answers to the user depending on the calling Dialogcontext
            /// </summary>
            /// <param name="context"></param>
            /// <param name="argument"></param>
            /// <returns></returns>
            private async Task MessageReceivedAsync(IDialogContext context, IAwaitable<IMessageActivity> argument)
            {
                // Get the text passed
                var message = await argument;

                // See if user answered yes
                if (message.Text.ToLower().Equals(Resource1.Yes))
                {
                    //wenn du von help zurückkommst
                    //wenn du von unternhemensangaben zurückkommst
                    await context.PostAsync(Resource1.Saved);
                }
                else
                {
                    context.Call(this, AfterDialog);

                }

            }

            /// <summary>
            /// AfterDialog is a ResumeHandler-Method. Whenever a call to other Dialogs is made by Context.Call() the return point of Code has to be specified
            /// AferDialog is such a return point.
            /// </summary>
            /// <param name="context"></param>
            /// <param name="result">The result that may be passed back by the dialog, e.g. a JSON Object with populated enities</param>
            /// <returns></returns>
            public async Task AfterDialog(IDialogContext context, IAwaitable<object> result)
            {
                var confirm = await result;


                await context.PostAsync(Resource1.GotHelpedQuestion);

                context.Wait(MessageReceivedAsync);
            }
            // Cache of culture specific forms. reference https://github.com/Microsoft/BotBuilder/tree/master/CSharp/Samples/AnnotatedSandwichBot
            private static ConcurrentDictionary<CultureInfo, IForm<ESF2CompanyDetailsForm>> _forms = new ConcurrentDictionary<CultureInfo, IForm<ESF2CompanyDetailsForm>>();

            [Serializable]
            [Template(TemplateUsage.NotUnderstood, "Dies habe ich nicht verstanden: \"{0}\".", "Nochmal versuchen, ich verstehe \"{0}\" nicht.")]
            public class ESF2CompanyDetailsForm
            {
            /*The class ESFCompanyDetailsForm is a static class modelling the input fields of a form. It is instantiated with FormBuider.Build()
             method. This is the easiest but also crudest way of having the bot filling in fields with user input.
             The API for Prompts for example is not localizable meaning that if these Promps are used, there is only one language available in which
             is prompted.
             Since ListenToMe is using a dynamic
             webform with German, English and Polish, where the fields might change in the future, usage of this class is deprecated.
            ToDO search for alternatives*/

                [Prompt(" Was ist dein {&}?")]
                public string Vorname { get; set; }

                [Prompt("Und dein {&}?")]
                public string Nachname { get; set; }

                [Prompt("Nenne deinen {&}.")]
                public string Unternehmensname { get; set; }
                [Prompt("Straße?")]
                public String Straße { get; set; }

                //toDo: Ask Adrian about Regex Hausnummer
                [Prompt("Hausnummer?")]
                public String Hausnummer { get; set; }
                [Prompt("Telefonnummer?")]
                [Pattern(@"(\(\d{3}\))?\s*\d{3}(-|\s*)\d{4}")]
                public string Telefon { get; set; }

                [Prompt("Emailadresse")]
                [Pattern(@"^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$")]
                public string Email { get; set; }

                [Pattern(@"[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)")]
                [Prompt("Firmen-URL")] //[Optional] nur bei enum sinnvoll?
                public string URL { get; set; }

                public static IForm<ESF2CompanyDetailsForm> BuildForm()
                {
                    return new FormBuilder<ESF2CompanyDetailsForm>()
                        .Message("Willkommen im ESF_2 Bot.")
                        .Build();
                }

                /*this is a method for conversinging in bot dialog's in multiple languages. However, the navigation language is still
                 English (e.g. commands like yes or no in a confimation message. This is slightly dissatisfactory and brings thus
                 no real advantage over BuildJsonFromForm*/
                public static IForm<ESF2CompanyDetailsForm> BuildLocalizedForm()
                {
                    var culture = Thread.CurrentThread.CurrentUICulture;
                    IForm<ESF2CompanyDetailsForm> form;
                    if (!_forms.TryGetValue(culture, out form))
                    {
                        OnCompletionAsyncDelegate<ESF2CompanyDetailsForm> processOrder = async (context, state) =>
                        {
                            //get the string from the ressource file that shows you are processing the form
                            await context.PostAsync(Resource1.Processing);//vormals Properties.Processing 
                        };
                        // Form builder uses the thread culture to automatically switch framework strings
                        // and also your static strings as well.  Dynamically defined fields must do their own localization.
                        var builder = new FormBuilder<ESF2CompanyDetailsForm>()
                                .Message(Resource1.FormWelcomeMessage)
                                .Field(nameof(Vorname))
                                .Field(nameof(Nachname))
                                .Field(nameof(Unternehmensname))
                                .Field(nameof(Telefon))
                                .Field(nameof(Email))
                                .Field(nameof(URL))
                                .Confirm(Resource1.AskForSave + "{Vorname}, {Nachname}, {Unternehmensname}, {Telefon}, {Email}, {URL} ?", null, new Confirmations())//is this your selection\n{*}?
                                .AddRemainingFields()
                                .Message(Resource1.Thanks)
                                .OnCompletion(processOrder);
                        builder.Configuration.DefaultPrompt.ChoiceStyle = ChoiceStyleOptions.Auto;
                        form = builder.Build();
                        _forms[culture] = form;
                    }
                    return form;
                }

                public static IForm<JObject> BuildJsonForm()
                {
                Assembly assembly = Assembly.GetExecutingAssembly();
                Stream stream = assembly.GetManifestResourceStream("LuisBot.JsonDummyForBot.json");
                    using (stream)
                    {
                        var schema = JObject.Parse(new StreamReader(stream).ReadToEnd());
                        return new FormBuilderJson(schema)
                            //.AddRemainingFields() //not tested
                            .Build();
                    }
                }
            }

        }

        /// <summary>
        /// this was an experiment to circumvent the navigation language English and enable the user to confirm in confirmations with 'ja'/'nein'
        /// Has not been sucessfull.
        /// </summary>
        //reference https://stackoverflow.com/questions/11296810/how-do-i-implement-ienumerablet
        //try to use this for .Confirm
        class Confirmations : IEnumerable<string>
        {
            List<string> mylist = new List<string>() { Resource1.Yes, Resource1.No };

            public string this[int index]
            {
                get { return mylist[index]; }
                set { mylist.Insert(index, value); }
            }

            public IEnumerator GetEnumerator()
            {
                return this.GetEnumerator();
            }

            IEnumerator<string> IEnumerable<string>.GetEnumerator()
            {
                return mylist.GetEnumerator();
            }
        }
    }